using System.Collections.Generic;
using System.Linq;

namespace CodeArtEng.SQLite
{
    /// <summary>
    /// Internal class to handle key value index table items.
    /// </summary>
    internal class IndexTableHandler
    {
        /// <summary>
        /// Last read index to optimize <see cref="SQLiteHelper.ReadFromDatabase{T}(string)"/>
        /// operation. 
        /// </summary>
        public long LastReadID { get; set; } = 0;
        public IndexTableHandler(string name) => Name = name;
        /// <summary>
        /// Table name
        /// </summary>
        public string Name { get; private set; }
        /// <summary>
        /// Table's Items
        /// </summary>
        public List<IndexTable> Items { get; set; } = new List<IndexTable>();
        /// <summary>
        /// New items, pending update to database.
        /// </summary>
        public List<IndexTable> NewItems { get; set; } = new List<IndexTable>();
        /// <summary>
        /// Get next unique ID.
        /// </summary>
        /// <returns></returns>
        public int GetNextID() => (Items.Count == 0) ? 1 : Items.Max(n => n.ID) + 1;
        /// <summary>
        /// Get value by ID.
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public int GetIdByName(string name)
        {
            //IF item not exist, register new id to index table.
            //item added to new item list in index table.
            //id in index table auto generated by indextable class

            IndexTable ptrItem = Items.FirstOrDefault(n => n.Name == name);
            if (ptrItem == null)
            {
                ptrItem = new IndexTable() { ID = GetNextID(), Name = name };
                Items.Add(ptrItem);
                NewItems.Add(ptrItem);
            }
            return ptrItem.ID;
        }
        /// <summary>
        /// Get ID by value.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public string GetValueById(int id) => Items.FirstOrDefault(n => n.ID == id)?.Name;
    }

    /// <summary>
    /// Entry for Key Value Index table. Also template for generic key value index table with columns: ID and Name.
    /// </summary>
    public class IndexTable
    {
        [PrimaryKey]
        public int ID { get; set; }
        [SQLUnique]
        public string Name { get; set; }
    }
}
